//
// TreesRadio Firebase security definitions
// Compiles with firebase-bolt
// https://www.firebase.com/docs/security/bolt/index.html
//



////////////////////////////////////////////////////////////////
// GLOBAL FUNCTIONS
////////////////////////////////////////////////////////////////
isAuth() {auth != null}
isUser(uid) { isAuth() && auth.uid == uid }
isSendingUser() {isUser(newData.child('uid').val()) || isUser(data.child('uid').val())}


////////////////////////////////////////////////////////////////
// MAIN PATH
////////////////////////////////////////////////////////////////
path / {

}

path /_admin {
  read() {true}
}

path /backend/chatlock {
  read() {true}
}

////////////////////////////////////////////////////////////////
// CHAT
////////////////////////////////////////////////////////////////

path /chat {
  read() {true}
}

////////////////////////////////////////////////////////////////
// PLAYLISTS
////////////////////////////////////////////////////////////////
type Playlist {
  entries: Object,
  key: Any,
  name: String
}

path /playlists/{$uid} {
  read() {isUser($uid)}
  write() {isUser($uid)}
}

////////////////////////////////////////////////////////////////
// PLAYING MEDIA
////////////////////////////////////////////////////////////////

path /playing {
  read() {true}
}

////////////////////////////////////////////////////////////////
// PRESENCE
////////////////////////////////////////////////////////////////

path /presence {
  read() {true}
}

path /presence/{$username} {
  //write() {isUser(newData.child('uid').val()) || isUser(data.child('uid').val())}
  write() { root.child('users/'+auth.uid+'/username').val() === $username }
}

////////////////////////////////////////////////////////////////
// USERS
////////////////////////////////////////////////////////////////

path /users/{$uid} {
  read() {true}
}

path /private/{$uid} {
  read() {isUser($uid)}
  write() {isUser($uid)}
}

path /moderator {
  read() {true}
}

path /bans {
  read() {true}
}

////////////////////////////////////////////////////////////////
// WAITLIST
////////////////////////////////////////////////////////////////

//type WaitlistTask {
//  channel: String,
//  thumb: String,
//  title: String,
//  uid: String,
//  url: String,
//  user: String,
//  avatar: String | Null
//}

path /waitlist/tasks {
  read() {true}
}


//\/\/\/\//\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
//NEWNEWNEWNEWNEWNEWNEWNEWNEWNEWNEWNEWNEWNEWNEWNEW
//\/\/\/\//\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/

///////////////////////////////////////////////////////////////
// QUEUESQUEUESQUEUESQUEUESQUEUESQUEUESQUEUESQUEUESQUEUES
///////////////////////////////////////////////////////////////

path /queues {
  read() {false}
}

path /queues/chat/tasks {
  index() {["_state"]}
}

path /queues/chat/tasks/{task} {
  write() {isSendingUser()}
}

path /ranks {
  read() {true}
}

path /avatars {
  read() {true}
}

path /avatars/{username} {
  write() {root.child('users/'+auth.uid+'/username').val() === username}
}
