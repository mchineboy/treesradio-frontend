//
// TreesRadio Firebase security definitions
// Compiles with firebase-bolt
// https://www.firebase.com/docs/security/bolt/index.html
//



////////////////////////////////////////////////////////////////
// GLOBAL FUNCTIONS
////////////////////////////////////////////////////////////////
isUser(uid) { auth != null && auth.uid == uid }


////////////////////////////////////////////////////////////////
// MAIN PATH
////////////////////////////////////////////////////////////////
path / {

}

path /_admin {
  read() = true;
}

////////////////////////////////////////////////////////////////
// CHAT
////////////////////////////////////////////////////////////////

path /chat {
  read() = true;
}

path /queues/chat/tasks/$task {
  write() = isUser(newData.child('uid').val());
}



////////////////////////////////////////////////////////////////
// PLAYLISTS
////////////////////////////////////////////////////////////////
type Playlist {
  entries: Object,
  key: Any,
  name: String
}

path /playlists/$userid {
  read() = isUser($userid);
  write() = isUser($userid);
}

////////////////////////////////////////////////////////////////
// PLAYING MEDIA
////////////////////////////////////////////////////////////////

path /playing_media {
  read() = true;
}

////////////////////////////////////////////////////////////////
// PRESENCE
////////////////////////////////////////////////////////////////

path /presence {
  read() = true;
}

  path /presence/$username {
    write() = isUser(newData.child('uid').val()) || isUser(data.child('uid').val());
  }

////////////////////////////////////////////////////////////////
// USERS
////////////////////////////////////////////////////////////////

path /users/$uid {
  read() = isUser($uid);
  write() = true;
}

path /moderator {
  read() = true;
}

path /bans {
  read() = true;
}

////////////////////////////////////////////////////////////////
// WAITLIST
////////////////////////////////////////////////////////////////

//type WaitlistTask {
//  channel: String,
//  thumb: String,
//  title: String,
//  uid: String,
//  url: String,
//  user: String,
//  avatar: String | Null
//}

path /waitlist/tasks {
  read() = true;
}

path /waitlist/tasks/$task {
  write() = isUser(newData.child('uid').val()) || isUser(data.child('uid').val());
}

////////////////////////////////////////////////////////////////
// FEEDBACK
////////////////////////////////////////////////////////////////

type FeedbackTask {
  type: String,
  user: String
}

path /queues/feedback/tasks/$task is FeedbackTask {
  write() = isUser(newData.child('user').val());
}
