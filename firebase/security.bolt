//
// TreesRadio Firebase security definitions
// Compiles with firebase-bolt
// https://www.firebase.com/docs/security/bolt/index.html
//



////////////////////////////////////////////////////////////////
// GLOBAL FUNCTIONS
////////////////////////////////////////////////////////////////
isUser(uid) { auth != null && auth.uid == uid }


////////////////////////////////////////////////////////////////
// MAIN PATH
////////////////////////////////////////////////////////////////
path / {

}

////////////////////////////////////////////////////////////////
// CHAT
////////////////////////////////////////////////////////////////
type MsgNode {
  avatar: String,
  user: String,
  msgs: Object
}

path /chat {
  read() = true;
}

path /chat/messages/$msgs is MsgNode {
  write() = true;
}

////////////////////////////////////////////////////////////////
// PLAYLISTS
////////////////////////////////////////////////////////////////
type Playlist {
  entries: Object,
  key: Any,
  name: String
}

path /playlists/$userid {
  read() = isUser($userid);
  write() = isUser($userid);
}

////////////////////////////////////////////////////////////////
// PLAYING MEDIA
////////////////////////////////////////////////////////////////

path /playing_media {
  read() = true;
}

path /playing_media/admin {
  write() = root.child('users').child(auth.uid).child('level').val() > 0;
}

////////////////////////////////////////////////////////////////
// PRESENCE
////////////////////////////////////////////////////////////////

path /presence {
  read() = true;
}

path /presence/$username {
  write() = isUser(newData.child('uid').val());
}

////////////////////////////////////////////////////////////////
// USERS
////////////////////////////////////////////////////////////////

path /users/$uid {
  read() = isUser($uid);
  write() = isUser($uid);
}

////////////////////////////////////////////////////////////////
// WAITLIST
////////////////////////////////////////////////////////////////

type WaitlistTask {
  channel: String,
  thumb: String,
  title: String,
  uid: String,
  url: String,
  user: String
}

path /waitlist/tasks {
  read() = true;
}

path /waitlist/tasks/$task is WaitlistTask {
  write() = isUser(newData.child('uid').val());
}

////////////////////////////////////////////////////////////////
// FEEDBACK
////////////////////////////////////////////////////////////////

type FeedbackTask {
  type: String,
  user: String
}

path /queues/feedback/tasks/$task is FeedbackTask {
  write() = isUser(newData.child('user').val());
}
