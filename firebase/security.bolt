//
// TreesRadio Firebase security definitions
// Compiles with firebase-bolt
// https://www.firebase.com/docs/security/bolt/index.html
//



////////////////////////////////////////////////////////////////
// GLOBAL FUNCTIONS
////////////////////////////////////////////////////////////////
isAuth() {auth != null}
isUser(uid) { isAuth() && auth.uid == uid }

chatHasUsername(type, uid) { ( type == 'chat' && root.child('usernames/'+uid).val() != null ) || ( type != 'chat' ) }

isSendingUser() { ( isUser(newData.child('uid').val()) || isUser(data.child('uid').val()) ) && ( chatHasUsername(newData.child('type').val(), newData.child('uid').val()) || chatHasUsername(data.child('type').val(), data.child('uid').val())) }


////////////////////////////////////////////////////////////////
// MAIN PATH
////////////////////////////////////////////////////////////////
path / {

}

path /_admin {
  read() {true}
}

path /events {
  read() {true}
}

path /backend {
  read() {true}
}

////////////////////////////////////////////////////////////////
// CHAT
////////////////////////////////////////////////////////////////

path /chat {
  read() {true}
}

////////////////////////////////////////////////////////////////
// PLAYLISTS
////////////////////////////////////////////////////////////////
type Playlist {
  entries: Object,
  key: Any,
  name: String
}

path /playlists/{$uid} {
  read() {isUser($uid)}
  write() {isUser($uid)}
}

////////////////////////////////////////////////////////////////
// PLAYING MEDIA
////////////////////////////////////////////////////////////////

path /playing {
  read() {true}
}

////////////////////////////////////////////////////////////////
// PRESENCE
////////////////////////////////////////////////////////////////

path /presence {
  read() {true}
}

////////////////////////////////////////////////////////////////
// USERS
////////////////////////////////////////////////////////////////

path /users/{$uid} {
  read() {true}
}

path /private/{$uid} {
  read() {isUser($uid)}
  write() {isUser($uid)}
}

path /user_events/{$uid} {
  read() {isUser($uid)}
}

path /moderator {
  read() {true}
}

path /bans/{$uid} {
  read() {isUser($uid)}
}

////////////////////////////////////////////////////////////////
// WAITLIST
////////////////////////////////////////////////////////////////

//type WaitlistTask {
//  channel: String,
//  thumb: String,
//  title: String,
//  uid: String,
//  url: String,
//  user: String,
//  avatar: String | Null
//}

path /waitlist {
  read() {true}
}


///////////////////////////////////////////////////////////////
// QUEUESQUEUESQUEUESQUEUESQUEUESQUEUESQUEUESQUEUESQUEUES
///////////////////////////////////////////////////////////////

// path /queues {
//   read() {false}
// }

// path /queues/chat/tasks {
//   index() {["_state"]}
// }

// path /queues/chat/tasks/{task} {
//   write() {isSendingUser()}
// }

path /ranks {
  read() {true}
}

path /ranks_settings_READ_ONLY {
  read() {true}
}

path /avatars {
  read() {true}
}

path /avatars/{$uid} {
  write() {isUser($uid)}
}


// Event Handlers //

path /event_bus/{event} {
  write() {isSendingUser()}
}

// Presence //

path /presence {
  read() {true}
}

path /presence/{$uid} {
  write() {isUser($uid)}
}

// Usernames //
path /usernames {
  read() {true}
}

// Registration // 

path /registered/{$uid} {
  read() {isUser($uid)}
}
